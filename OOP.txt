import xml.etree.ElementTree as ET
import os
from gurobipy import * 




class DataProcesser(object):
    def __init__ (self):
        pass 

    def getData(self):
        Days = 5
        PPD = -1
        Rooms = []
        Courses = []
        Curricula = []
        P = []
        D = []

        CCOURSES = {}
        L  = {} 
        MND = {} 
        DEM = {}
        CAP = {} 
        S = {0}
        
        script_dir = os.path.dirname(__file__)
        relpath = 'CCT/ITC2007/comp17.xml'
        absFilePath = os.path.join(script_dir, relpath)

        tree = ET.parse(absFilePath)
        root = tree.getroot()
        #DATA ANALYSIS
        for child in root:
            if child.tag == "descriptor":
                for gchild in child:
                    if (gchild.tag == "periods_per_day"):
                        PPD = int(gchild.attrib["value"]) 
            
            for gchild in child:
                attribs = gchild.attrib
                tag = gchild.tag

                if tag == "course":
                    id = attribs['id']
                    Courses.append(id)
                    MND[id] = int(attribs['min_days'])
                    DEM[id] = int(attribs['students'])
                    L[id] = int(attribs['lectures'])

                elif tag == "room":
                    id = attribs['id']

                    Rooms.append(id)
                    CAP[id] = int(attribs['size'])
                    S.add(int(attribs['size']))
                
                elif tag == "curriculum":
                    id = attribs['id']

                    Curricula.append(id)
                    CurriculaCourses = []

                    for ggchild in gchild:
                        CurriculaCourses.append(ggchild.attrib['ref'])

                    CCOURSES[id] = CurriculaCourses


        P = range(1, Days * PPD + 1)
        D = [[(j+1) + i*(PPD-1) for i in range(PPD)] for j in range(Days)]
        SGT = {s : [ss for ss in S if ss >= s] for s in S}
        CGT = {s : [c for c in Courses if DEM[c] >= s] for s in S}
        RGT = {s : [c for c in Rooms if CAP[c] >= s] for s in S}


        return {"Days": Days, "PPD":PPD, "Rooms" : Rooms, "Courses": Courses, "L" : L, "MND": MND, "DEM" : DEM,  "CAP" : CAP, "S": S , "P": P , "D": D, "SGT": SGT, "CGT" : CGT, "RGT": RGT}


dp = DataProcesser()

data = dp.getData()

L = data["L"]
CGT = data["CGT"]
RGT = data["RGT"]
S = data["S"]
P = data["P"]
# Teaching Periods Problem
TPP = Model()
T = {p : TPP.addVar(vtype = GRB.BINARY) for p in P}
TPP.setObjective(quicksum(T[p] for p in P), GRB.MINIMIZE)
SetCovering = {s: TPP.addConstr(len(RGT[s])*quicksum(T[p] for p in P) >= quicksum(L[c] for c in CGT[s])) for s in S}
ConsecPeriods = {p: TPP.addConstr((T[p] - T[p-1]) <= 0) for p in P if p != 1}
TPP.optimize()


